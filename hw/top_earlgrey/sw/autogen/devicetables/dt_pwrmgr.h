// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_PWRMGR_H_
#define OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_PWRMGR_H_

#include "sw/device/lib/devicetables/dt_api.h"
#include <stdint.h>

typedef enum {
  kDtPwrmgrRegBlockCore = 0,
  kDtPwrmgrRegBlockCount = 1,
} dt_pwrmgr_reg_block_t;

typedef enum {
  kDtPwrmgrIrqTypeWakeup = 0,
  kDtPwrmgrIrqTypeCount = 1,
} dt_pwrmgr_irq_type_t;

typedef enum {
  kDtPwrmgrClockClk = 0,
  kDtPwrmgrClockSlow = 1,
  kDtPwrmgrClockLc = 2,
  kDtPwrmgrClockEsc = 3,
  kDtPwrmgrClockCount = 4,
} dt_pwrmgr_clock_t;

typedef struct dt_pwrmgr {
  dt_device_id_t device_id;
  uint32_t base_addrs[kDtPwrmgrRegBlockCount];
  uint32_t irqs[kDtPwrmgrIrqTypeCount];
  dt_clock_t clocks[kDtPwrmgrClockCount];
} dt_pwrmgr_t;

/**
 * Convert a global IRQ ID to a local pwrmgr IRQ type.
 *
 * @param dt Pointer to an instance of pwrmgr.
 * @param irq A global IRQ ID.
 * @return The local pwrmgr IRQ type of this irq.
 *
 * IMPORTANT This function assumes that the global IRQ belongs to the instance
 * of pwrmgr passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`
 *
 * FIXME How should we handle errors (when the invariant above is violated)?
 */
static inline dt_pwrmgr_irq_type_t dt_pwrmgr_irq_type(
    const dt_pwrmgr_t *dt,
    dt_irq_t irq) {
  // FIXME Should check that irq >= dt->irqs[0] and irq < dt->irqs[0] + kDtPwrmgrIrqTypeCount
  return irq - dt->irqs[0];
}

#endif  // OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_PWRMGR_H_
