// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_SENSOR_CTRL_H_
#define OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_SENSOR_CTRL_H_

#include "sw/device/lib/devicetables/dt.h"
#include <stdint.h>

typedef enum {
  kDtSensorCtrlRegBlockCore = 0,
  kDtSensorCtrlRegBlockCount = 1,
} dt_sensor_ctrl_reg_block_t;

typedef enum {
  kDtSensorCtrlIrqTypeIoStatusChange = 0,
  kDtSensorCtrlIrqTypeInitStatusChange = 1,
  kDtSensorCtrlIrqTypeCount = 2,
} dt_sensor_ctrl_irq_type_t;

typedef enum {
  kDtSensorCtrlClockClk = 0,
  kDtSensorCtrlClockAon = 1,
  kDtSensorCtrlClockCount = 2,
} dt_sensor_ctrl_clock_t;

typedef enum {
  kDtSensorCtrlPinctrlOutputAstDebugOut0 = 0,
  kDtSensorCtrlPinctrlOutputAstDebugOut1 = 1,
  kDtSensorCtrlPinctrlOutputAstDebugOut2 = 2,
  kDtSensorCtrlPinctrlOutputAstDebugOut3 = 3,
  kDtSensorCtrlPinctrlOutputAstDebugOut4 = 4,
  kDtSensorCtrlPinctrlOutputAstDebugOut5 = 5,
  kDtSensorCtrlPinctrlOutputAstDebugOut6 = 6,
  kDtSensorCtrlPinctrlOutputAstDebugOut7 = 7,
  kDtSensorCtrlPinctrlOutputAstDebugOut8 = 8,
  kDtSensorCtrlPinctrlInputCount = 0,
  kDtSensorCtrlPinctrlOutputCount = 9,
} dt_sensor_ctrl_pinctrl_t;

typedef struct dt_sensor_ctrl {
  dt_device_id_t device_id;
  uint32_t base_addrs[kDtSensorCtrlRegBlockCount];
  uint32_t irqs[kDtSensorCtrlIrqTypeCount];
  dt_clock_t clocks[kDtSensorCtrlClockCount];
} dt_sensor_ctrl_t;

/**
 * Convert a global IRQ ID to a local sensor_ctrl IRQ type.
 *
 * @param dt Pointer to an instance of sensor_ctrl.
 * @param irq A global IRQ ID.
 * @return The local sensor_ctrl IRQ type of this irq.
 *
 * IMPORTANT This function assumes that the global IRQ belongs to the instance
 * of sensor_ctrl passed in parameter. In other words, it must the case that
 * `dt->device == dt_irq_to_device(irq)`
 *
 * FIXME How should we handle errors (when the invariant above is violated)?
 */
static inline dt_sensor_ctrl_irq_type_t dt_sensor_ctrl_irq_type(
    const dt_sensor_ctrl_t *dt,
    dt_irq_t irq) {
  // FIXME Should check that irq >= dt->irqs[0] and irq < dt->irqs[0] + kDtSensorCtrlIrqTypeCount
  return irq - dt->irqs[0];
}

#endif  // OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_SENSOR_CTRL_H_
