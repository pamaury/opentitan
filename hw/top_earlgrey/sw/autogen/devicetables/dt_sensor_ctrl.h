// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_SENSOR_CTRL_H_
#define OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_SENSOR_CTRL_H_

#include "sw/device/lib/devicetables/dt_api.h"
#include <stdint.h>

typedef enum {
  kDtSensorCtrlRegBlockCore = 0,
  kDtSensorCtrlRegBlockCount = 1,
} dt_sensor_ctrl_reg_block_t;

typedef enum {
  kDtSensorCtrlIrqTypeIoStatusChange = 0,
  kDtSensorCtrlIrqTypeInitStatusChange = 1,
  kDtSensorCtrlIrqTypeCount = 2,
} dt_sensor_ctrl_irq_type_t;

typedef enum {
  kDtSensorCtrlClockClk = 0,
  kDtSensorCtrlClockAon = 1,
  kDtSensorCtrlClockCount = 2,
} dt_sensor_ctrl_clock_t;

typedef enum {
  kDtSensorCtrlPinAstDebugOut0 = 0,
  kDtSensorCtrlPinAstDebugOut1 = 1,
  kDtSensorCtrlPinAstDebugOut2 = 2,
  kDtSensorCtrlPinAstDebugOut3 = 3,
  kDtSensorCtrlPinAstDebugOut4 = 4,
  kDtSensorCtrlPinAstDebugOut5 = 5,
  kDtSensorCtrlPinAstDebugOut6 = 6,
  kDtSensorCtrlPinAstDebugOut7 = 7,
  kDtSensorCtrlPinAstDebugOut8 = 8,
  kDtSensorCtrlPinCount = 9,
} dt_sensor_ctrl_pin_t;

typedef struct dt_sensor_ctrl {
  struct {
    dt_device_id_t device_id;
    uint32_t base_addrs[kDtSensorCtrlRegBlockCount];
    dt_irq_t irqs[kDtSensorCtrlIrqTypeCount];
    dt_clock_t clocks[kDtSensorCtrlClockCount];
    dt_pin_t pins[kDtSensorCtrlPinCount];
  } __internal;
} dt_sensor_ctrl_t;

/**
 * Get the device ID of an instance.
 *
 * @param dt Pointer to an instance of sensor_ctrl.
 * @return The device ID of that instance.
 */
static inline dt_device_id_t dt_sensor_ctrl_device_id(
    const dt_sensor_ctrl_t *dt) {
  return dt->__internal.device_id;
}

/**
 * Get the register base address of an instance.
 *
 * @param dt Pointer to an instance of sensor_ctrl.
 * @param reg_block The register block requested.
 * @return The register base address of the requested block.
 */
static inline uint32_t dt_sensor_ctrl_reg_block(
    const dt_sensor_ctrl_t *dt,
    dt_sensor_ctrl_reg_block_t reg_block) {
  return dt->__internal.base_addrs[reg_block];
}

/**
 * Get the global IRQ ID of a local sensor_ctrl IRQ type for a given instance.
 *
 * @param dt Pointer to an instance of sensor_ctrl.
 * @param irq_type A local sensor_ctrl IRQ type.
 * @return A global IRQ ID that corresponds to the local IRQ type of this instance.
 */
static inline dt_irq_t dt_sensor_ctrl_irq_id(
    const dt_sensor_ctrl_t *dt,
    dt_sensor_ctrl_irq_type_t irq_type) {
  return dt->__internal.irqs[irq_type];
}

/**
 * Convert a global IRQ ID to a local sensor_ctrl IRQ type.
 *
 * @param dt Pointer to an instance of sensor_ctrl.
 * @param irq A global IRQ ID that belongs to this instance.
 * @return The local sensor_ctrl IRQ type, or `kDtSensorCtrlIrqTypeCount`.
 *
 * NOTE This function assumes that the global IRQ belongs to the instance
 * of sensor_ctrl passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`. Otherwise, this function will return
 * `kDtSensorCtrlIrqTypeCount`.
 */
static inline dt_sensor_ctrl_irq_type_t dt_sensor_ctrl_irq_type(
    const dt_sensor_ctrl_t *dt,
    dt_irq_t irq) {
  dt_sensor_ctrl_irq_type_t count = kDtSensorCtrlIrqTypeCount;
  if (irq < dt->__internal.irqs[0] || irq >= dt->__internal.irqs[0] + (dt_irq_t)count) {
    return count;
  }
  return irq - dt->__internal.irqs[0];
}

/**
 * Get the pin description of an instance.
 *
 * @param dt Pointer to an instance of sensor_ctrl.
 * @param pin Requested pin.
 * @return Description of the requested pin for this instance.
 */
static inline dt_pin_t dt_sensor_ctrl_pin(
    const dt_sensor_ctrl_t *dt,
    dt_sensor_ctrl_pin_t pin) {
  return dt->__internal.pins[pin];
}
#endif  // OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_SENSOR_CTRL_H_
