// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_ALERT_HANDLER_H_
#define OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_ALERT_HANDLER_H_

#include "sw/device/lib/devicetables/dt_api.h"
#include <stdint.h>

typedef enum {
  kDtAlertHandlerRegBlockCore = 0,
  kDtAlertHandlerRegBlockCount = 1,
} dt_alert_handler_reg_block_t;

typedef enum {
  kDtAlertHandlerIrqTypeClassa = 0,
  kDtAlertHandlerIrqTypeClassb = 1,
  kDtAlertHandlerIrqTypeClassc = 2,
  kDtAlertHandlerIrqTypeClassd = 3,
  kDtAlertHandlerIrqTypeCount = 4,
} dt_alert_handler_irq_type_t;

typedef enum {
  kDtAlertHandlerClockClk = 0,
  kDtAlertHandlerClockEdn = 1,
  kDtAlertHandlerClockCount = 2,
} dt_alert_handler_clock_t;

typedef struct dt_alert_handler {
  struct {
    dt_device_id_t device_id;
    uint32_t base_addrs[kDtAlertHandlerRegBlockCount];
    dt_irq_t irqs[kDtAlertHandlerIrqTypeCount];
    dt_clock_t clocks[kDtAlertHandlerClockCount];
  } __internal;
} dt_alert_handler_t;

/**
 * Get the device ID of an instance.
 *
 * @param dt Pointer to an instance of alert_handler.
 * @return The device ID of that instance.
 */
static inline dt_device_id_t dt_alert_handler_device_id(
    const dt_alert_handler_t *dt) {
  return dt->__internal.device_id;
}

/**
 * Get the register base address of an instance.
 *
 * @param dt Pointer to an instance of alert_handler.
 * @param reg_block The register block requested.
 * @return The register base address of the requested block.
 */
static inline uint32_t dt_alert_handler_reg_block(
    const dt_alert_handler_t *dt,
    dt_alert_handler_reg_block_t reg_block) {
  return dt->__internal.base_addrs[reg_block];
}

/**
 * Get the global IRQ ID of a local alert_handler IRQ type for a given instance.
 *
 * @param dt Pointer to an instance of alert_handler.
 * @param irq_type A local alert_handler IRQ type.
 * @return A global IRQ ID that corresponds to the local IRQ type of this instance.
 */
static inline dt_irq_t dt_alert_handler_irq_id(
    const dt_alert_handler_t *dt,
    dt_alert_handler_irq_type_t irq_type) {
  return dt->__internal.irqs[irq_type];
}

/**
 * Convert a global IRQ ID to a local alert_handler IRQ type.
 *
 * @param dt Pointer to an instance of alert_handler.
 * @param irq A global IRQ ID that belongs to this instance.
 * @return The local alert_handler IRQ type, or `kDtAlertHandlerIrqTypeCount`.
 *
 * NOTE This function assumes that the global IRQ belongs to the instance
 * of alert_handler passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`. Otherwise, this function will return
 * `kDtAlertHandlerIrqTypeCount`.
 */
static inline dt_alert_handler_irq_type_t dt_alert_handler_irq_type(
    const dt_alert_handler_t *dt,
    dt_irq_t irq) {
  dt_alert_handler_irq_type_t count = kDtAlertHandlerIrqTypeCount;
  if (irq < dt->__internal.irqs[0] || irq >= dt->__internal.irqs[0] + (dt_irq_t)count) {
    return count;
  }
  return irq - dt->__internal.irqs[0];
}

#endif  // OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_ALERT_HANDLER_H_
