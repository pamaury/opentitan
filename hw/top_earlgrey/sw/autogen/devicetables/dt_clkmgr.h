// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_CLKMGR_H_
#define OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_CLKMGR_H_

#include "sw/device/lib/devicetables/dt_api.h"
#include <stdint.h>

typedef enum {
  kDtClkmgrRegBlockCore = 0,
  kDtClkmgrRegBlockCount = 1,
} dt_clkmgr_reg_block_t;

typedef enum {
  kDtClkmgrClockClk = 0,
  kDtClkmgrClockMain = 1,
  kDtClkmgrClockIo = 2,
  kDtClkmgrClockUsb = 3,
  kDtClkmgrClockAon = 4,
  kDtClkmgrClockCount = 5,
} dt_clkmgr_clock_t;

typedef struct dt_clkmgr {
  struct {
    dt_device_id_t device_id;
    uint32_t base_addrs[kDtClkmgrRegBlockCount];
    dt_clock_t clocks[kDtClkmgrClockCount];
  } __internal;
} dt_clkmgr_t;

/**
 * Get the device ID of an instance.
 *
 * @param dt Pointer to an instance of clkmgr.
 * @return The device ID of that instance.
 */
static inline dt_device_id_t dt_clkmgr_device_id(
    const dt_clkmgr_t *dt) {
  return dt->__internal.device_id;
}

/**
 * Get the register base address of an instance.
 *
 * @param dt Pointer to an instance of clkmgr.
 * @param reg_block The register block requested.
 * @return The register base address of the requested block.
 */
static inline uint32_t dt_clkmgr_reg_block(
    const dt_clkmgr_t *dt,
    dt_clkmgr_reg_block_t reg_block) {
  return dt->__internal.base_addrs[reg_block];
}

#endif  // OPENTITAN_HW_TOP_EARLGREY_SW_AUTOGEN_DEVICETABLES_DT_CLKMGR_H_
