// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_CSRNG_H_
#define OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_CSRNG_H_

#include <stdint.h>

#include "sw/device/lib/devicetables/dt.h"

typedef enum {
  kDtCsrngRegBlockCore = 0,
  kDtCsrngRegBlockCount = 1,
} dt_csrng_reg_block_t;

typedef enum {
  kDtCsrngIrqTypeCsCmdReqDone = 0,
  kDtCsrngIrqTypeCsEntropyReq = 1,
  kDtCsrngIrqTypeCsHwInstExc = 2,
  kDtCsrngIrqTypeCsFatalErr = 3,
  kDtCsrngIrqTypeCount = 4,
} dt_csrng_irq_type_t;

typedef enum {
  kDtCsrngClockClk = 0,
  kDtCsrngClockCount = 1,
} dt_csrng_clock_t;

typedef enum {
  kDtCsrngPinctrlInputCount = 0,
  kDtCsrngPinctrlOutputCount = 0,
} dt_csrng_pinctrl_t;

typedef struct dt_csrng {
  dt_device_id_t device_id;
  uint32_t base_addrs[kDtCsrngRegBlockCount];
  uint32_t irqs[kDtCsrngIrqTypeCount];
  dt_clock_t clocks[kDtCsrngClockCount];
} dt_csrng_t;

/**
 * Convert a global IRQ ID to a local csrng IRQ type.
 *
 * @param dt Pointer to an instance of csrng.
 * @param irq A global IRQ ID.
 * @return The local csrng IRQ type of this irq.
 *
 * IMPORTANT This function assumes that the global IRQ belongs to the instance
 * of csrng passed in parameter. In other words, it must the case that
 * `dt->device == dt_irq_to_device(irq)`
 *
 * FIXME How should we handle errors (when the invariant above is violated)?
 */
static inline dt_csrng_irq_type_t dt_csrng_irq_type(const dt_csrng_t *dt,
                                                    dt_irq_t irq) {
  // FIXME Should check that irq >= dt->irqs[0] and irq < dt->irqs[0] +
  // kDtCsrngIrqTypeCount
  return irq - dt->irqs[0];
}

#endif  // OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_CSRNG_H_
