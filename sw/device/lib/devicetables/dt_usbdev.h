// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_USBDEV_H_
#define OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_USBDEV_H_

#include <stdint.h>

#include "sw/device/lib/devicetables/dt_api.h"

typedef enum {
  kDtUsbdevRegBlockCore = 0,
  kDtUsbdevRegBlockCount = 1,
} dt_usbdev_reg_block_t;

typedef enum {
  kDtUsbdevIrqTypePktReceived = 0,
  kDtUsbdevIrqTypePktSent = 1,
  kDtUsbdevIrqTypeDisconnected = 2,
  kDtUsbdevIrqTypeHostLost = 3,
  kDtUsbdevIrqTypeLinkReset = 4,
  kDtUsbdevIrqTypeLinkSuspend = 5,
  kDtUsbdevIrqTypeLinkResume = 6,
  kDtUsbdevIrqTypeAvOutEmpty = 7,
  kDtUsbdevIrqTypeRxFull = 8,
  kDtUsbdevIrqTypeAvOverflow = 9,
  kDtUsbdevIrqTypeLinkInErr = 10,
  kDtUsbdevIrqTypeRxCrcErr = 11,
  kDtUsbdevIrqTypeRxPidErr = 12,
  kDtUsbdevIrqTypeRxBitstuffErr = 13,
  kDtUsbdevIrqTypeFrame = 14,
  kDtUsbdevIrqTypePowered = 15,
  kDtUsbdevIrqTypeLinkOutErr = 16,
  kDtUsbdevIrqTypeAvSetupEmpty = 17,
  kDtUsbdevIrqTypeCount = 18,
} dt_usbdev_irq_type_t;

typedef enum {
  kDtUsbdevClockClk = 0,
  kDtUsbdevClockAon = 1,
  kDtUsbdevClockCount = 2,
} dt_usbdev_clock_t;

typedef enum {
  kDtUsbdevPinSense = 0,
  kDtUsbdevPinUsbDp = 1,
  kDtUsbdevPinUsbDn = 2,
  kDtUsbdevPinCount = 3,
} dt_usbdev_pin_t;

typedef struct dt_usbdev {
  struct {
    dt_device_id_t device_id;
    uint32_t base_addrs[kDtUsbdevRegBlockCount];
    dt_irq_t irqs[kDtUsbdevIrqTypeCount];
    dt_clock_t clocks[kDtUsbdevClockCount];
    dt_pin_t pins[kDtUsbdevPinCount];
  } __internal;
} dt_usbdev_t;

/**
 * Get the device ID of an instance.
 *
 * @param dt Pointer to an instance of usbdev.
 * @return The device ID of that instance.
 */
static inline dt_device_id_t dt_usbdev_device_id(const dt_usbdev_t *dt) {
  return dt->__internal.device_id;
}

/**
 * Get the register base address of an instance.
 *
 * @param dt Pointer to an instance of usbdev.
 * @param reg_block The register block requested.
 * @return The register base address of the requested block.
 */
static inline uint32_t dt_usbdev_reg_block(const dt_usbdev_t *dt,
                                           dt_usbdev_reg_block_t reg_block) {
  return dt->__internal.base_addrs[reg_block];
}

/**
 * Get the global IRQ ID of a local usbdev IRQ type for a given instance.
 *
 * @param dt Pointer to an instance of usbdev.
 * @param irq_type A local usbdev IRQ type.
 * @return A global IRQ ID that corresponds to the local IRQ type of this
 * instance.
 */
static inline dt_irq_t dt_usbdev_irq_id(const dt_usbdev_t *dt,
                                        dt_usbdev_irq_type_t irq_type) {
  return dt->__internal.irqs[irq_type];
}

/**
 * Convert a global IRQ ID to a local usbdev IRQ type.
 *
 * @param dt Pointer to an instance of usbdev.
 * @param irq A global IRQ ID that belongs to this instance.
 * @return The local usbdev IRQ type, or `kDtUsbdevIrqTypeCount`.
 *
 * NOTE This function assumes that the global IRQ belongs to the instance
 * of usbdev passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`. Otherwise, this function will
 * return `kDtUsbdevIrqTypeCount`.
 */
static inline dt_usbdev_irq_type_t dt_usbdev_irq_type(const dt_usbdev_t *dt,
                                                      dt_irq_t irq) {
  dt_usbdev_irq_type_t count = kDtUsbdevIrqTypeCount;
  if (irq < dt->__internal.irqs[0] ||
      irq >= dt->__internal.irqs[0] + (dt_irq_t)count) {
    return count;
  }
  return irq - dt->__internal.irqs[0];
}

/**
 * Get the pin description of an instance.
 *
 * @param dt Pointer to an instance of usbdev.
 * @param pin Requested pin.
 * @return Description of the requested pin for this instance.
 */
static inline dt_pin_t dt_usbdev_pin(const dt_usbdev_t *dt,
                                     dt_usbdev_pin_t pin) {
  return dt->__internal.pins[pin];
}
#endif  // OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_USBDEV_H_
