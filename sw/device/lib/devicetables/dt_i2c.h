// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_I2C_H_
#define OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_I2C_H_

#include <stdint.h>

#include "sw/device/lib/devicetables/dt_api.h"

typedef enum {
  kDtI2cRegBlockCore = 0,
  kDtI2cRegBlockCount = 1,
} dt_i2c_reg_block_t;

typedef enum {
  kDtI2cIrqTypeFmtThreshold = 0,
  kDtI2cIrqTypeRxThreshold = 1,
  kDtI2cIrqTypeAcqThreshold = 2,
  kDtI2cIrqTypeRxOverflow = 3,
  kDtI2cIrqTypeControllerHalt = 4,
  kDtI2cIrqTypeSclInterference = 5,
  kDtI2cIrqTypeSdaInterference = 6,
  kDtI2cIrqTypeStretchTimeout = 7,
  kDtI2cIrqTypeSdaUnstable = 8,
  kDtI2cIrqTypeCmdComplete = 9,
  kDtI2cIrqTypeTxStretch = 10,
  kDtI2cIrqTypeTxThreshold = 11,
  kDtI2cIrqTypeAcqStretch = 12,
  kDtI2cIrqTypeUnexpStop = 13,
  kDtI2cIrqTypeHostTimeout = 14,
  kDtI2cIrqTypeCount = 15,
} dt_i2c_irq_type_t;

typedef enum {
  kDtI2cClockClk = 0,
  kDtI2cClockCount = 1,
} dt_i2c_clock_t;

typedef enum {
  kDtI2cPinSda = 0,
  kDtI2cPinScl = 1,
  kDtI2cPinCount = 2,
} dt_i2c_pin_t;

typedef struct dt_i2c {
  struct {
    dt_device_id_t device_id;
    uint32_t base_addrs[kDtI2cRegBlockCount];
    dt_irq_t irqs[kDtI2cIrqTypeCount];
    dt_clock_t clocks[kDtI2cClockCount];
    dt_pin_t pins[kDtI2cPinCount];
  } __internal;
} dt_i2c_t;

/**
 * Get the device ID of an instance.
 *
 * @param dt Pointer to an instance of i2c.
 * @return The device ID of that instance.
 */
static inline dt_device_id_t dt_i2c_device_id(const dt_i2c_t *dt) {
  return dt->__internal.device_id;
}

/**
 * Get the register base address of an instance.
 *
 * @param dt Pointer to an instance of i2c.
 * @param reg_block The register block requested.
 * @return The register base address of the requested block.
 */
static inline uint32_t dt_i2c_reg_block(const dt_i2c_t *dt,
                                        dt_i2c_reg_block_t reg_block) {
  return dt->__internal.base_addrs[reg_block];
}

/**
 * Get the global IRQ ID of a local i2c IRQ type for a given instance.
 *
 * @param dt Pointer to an instance of i2c.
 * @param irq_type A local i2c IRQ type.
 * @return A global IRQ ID that corresponds to the local IRQ type of this
 * instance.
 */
static inline dt_irq_t dt_i2c_irq_id(const dt_i2c_t *dt,
                                     dt_i2c_irq_type_t irq_type) {
  return dt->__internal.irqs[irq_type];
}

/**
 * Convert a global IRQ ID to a local i2c IRQ type.
 *
 * @param dt Pointer to an instance of i2c.
 * @param irq A global IRQ ID that belongs to this instance.
 * @return The local i2c IRQ type, or `kDtI2cIrqTypeCount`.
 *
 * NOTE This function assumes that the global IRQ belongs to the instance
 * of i2c passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`. Otherwise, this function will
 * return `kDtI2cIrqTypeCount`.
 */
static inline dt_i2c_irq_type_t dt_i2c_irq_type(const dt_i2c_t *dt,
                                                dt_irq_t irq) {
  dt_i2c_irq_type_t count = kDtI2cIrqTypeCount;
  if (irq < dt->__internal.irqs[0] ||
      irq >= dt->__internal.irqs[0] + (dt_irq_t)count) {
    return count;
  }
  return irq - dt->__internal.irqs[0];
}

/**
 * Get the pin description of an instance.
 *
 * @param dt Pointer to an instance of i2c.
 * @param pin Requested pin.
 * @return Description of the requested pin for this instance.
 */
static inline dt_pin_t dt_i2c_pin(const dt_i2c_t *dt, dt_i2c_pin_t pin) {
  return dt->__internal.pins[pin];
}
#endif  // OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_I2C_H_
