// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_EDN_H_
#define OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_EDN_H_

#include <stdint.h>

#include "sw/device/lib/devicetables/dt_api.h"

typedef enum {
  kDtEdnRegBlockCore = 0,
  kDtEdnRegBlockCount = 1,
} dt_edn_reg_block_t;

typedef enum {
  kDtEdnIrqTypeEdnCmdReqDone = 0,
  kDtEdnIrqTypeEdnFatalErr = 1,
  kDtEdnIrqTypeCount = 2,
} dt_edn_irq_type_t;

typedef enum {
  kDtEdnClockClk = 0,
  kDtEdnClockCount = 1,
} dt_edn_clock_t;

typedef struct dt_edn {
  dt_device_id_t device_id;
  uint32_t base_addrs[kDtEdnRegBlockCount];
  uint32_t irqs[kDtEdnIrqTypeCount];
  dt_clock_t clocks[kDtEdnClockCount];
} dt_edn_t;

/**
 * Convert a global IRQ ID to a local edn IRQ type.
 *
 * @param dt Pointer to an instance of edn.
 * @param irq A global IRQ ID.
 * @return The local edn IRQ type of this irq.
 *
 * IMPORTANT This function assumes that the global IRQ belongs to the instance
 * of edn passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`
 *
 * FIXME How should we handle errors (when the invariant above is violated)?
 */
static inline dt_edn_irq_type_t dt_edn_irq_type(const dt_edn_t *dt,
                                                dt_irq_t irq) {
  // FIXME Should check that irq >= dt->irqs[0] and irq < dt->irqs[0] +
  // kDtEdnIrqTypeCount
  return irq - dt->irqs[0];
}

#endif  // OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_EDN_H_
