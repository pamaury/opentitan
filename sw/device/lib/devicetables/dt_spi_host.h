// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Device table API auto-generated by `reggen`

#ifndef OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_SPI_HOST_H_
#define OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_SPI_HOST_H_

#include <stdint.h>

#include "sw/device/lib/devicetables/dt.h"

typedef enum {
  kDtSpiHostRegBlockCore = 0,
  kDtSpiHostRegBlockCount = 1,
} dt_spi_host_reg_block_t;

typedef enum {
  kDtSpiHostIrqTypeError = 0,
  kDtSpiHostIrqTypeSpiEvent = 1,
  kDtSpiHostIrqTypeCount = 2,
} dt_spi_host_irq_type_t;

typedef enum {
  kDtSpiHostClockClk = 0,
  kDtSpiHostClockCount = 1,
} dt_spi_host_clock_t;

typedef enum {
  kDtSpiHostPinctrlInoutSd0 = 0,
  kDtSpiHostPinctrlInoutSd1 = 1,
  kDtSpiHostPinctrlInoutSd2 = 2,
  kDtSpiHostPinctrlInoutSd3 = 3,
  kDtSpiHostPinctrlOutputSck = 4,
  kDtSpiHostPinctrlOutputCsb = 5,
  kDtSpiHostPinctrlInputCount = 4,
  kDtSpiHostPinctrlOutputCount = 6,
} dt_spi_host_pinctrl_t;

typedef struct dt_spi_host {
  dt_device_id_t device_id;
  uint32_t base_addrs[kDtSpiHostRegBlockCount];
  uint32_t irqs[kDtSpiHostIrqTypeCount];
  dt_clock_t clocks[kDtSpiHostClockCount];
} dt_spi_host_t;

/**
 * Convert a global IRQ ID to a local spi_host IRQ type.
 *
 * @param dt Pointer to an instance of spi_host.
 * @param irq A global IRQ ID.
 * @return The local spi_host IRQ type of this irq.
 *
 * IMPORTANT This function assumes that the global IRQ belongs to the instance
 * of spi_host passed in parameter. In other words, it must be the case that
 * `dt->device_id == dt_irq_to_device(irq)`
 *
 * FIXME How should we handle errors (when the invariant above is violated)?
 */
static inline dt_spi_host_irq_type_t dt_spi_host_irq_type(
    const dt_spi_host_t *dt, dt_irq_t irq) {
  // FIXME Should check that irq >= dt->irqs[0] and irq < dt->irqs[0] +
  // kDtSpiHostIrqTypeCount
  return irq - dt->irqs[0];
}

#endif  // OPENTITAN_SW_DEVICE_LIB_DEVICETABLES_DT_SPI_HOST_H_
